
OudeVolvo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001474  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001534  08001534  00011534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001558  08001558  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001558  08001558  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001558  08001558  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001558  08001558  00011558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800155c  0800155c  0001155c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000024  08001584  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08001584  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c70  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ba8  00000000  00000000  00022cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004c8  00000000  00000000  00023868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000440  00000000  00000000  00023d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b336  00000000  00000000  00024170  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003562  00000000  00000000  0002f4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003a074  00000000  00000000  00032a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006ca7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fb4  00000000  00000000  0006caf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800151c 	.word	0x0800151c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	0800151c 	.word	0x0800151c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <FLASH_IRQHandler>:
  *         It handles any kind of error even if not used in this example.
  * Param   None
  * Retval  None
  */
void FLASH_IRQHandler(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  if ((FLASH->SR & FLASH_SR_EOP) != 0)  /* (3) */
 8000224:	4b4a      	ldr	r3, [pc, #296]	; (8000350 <FLASH_IRQHandler+0x130>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	2202      	movs	r2, #2
 800022a:	4013      	ands	r3, r2
 800022c:	d003      	beq.n	8000236 <FLASH_IRQHandler+0x16>
  {
    FLASH->SR = FLASH_SR_EOP; /* (4) */
 800022e:	4b48      	ldr	r3, [pc, #288]	; (8000350 <FLASH_IRQHandler+0x130>)
 8000230:	2202      	movs	r2, #2
 8000232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    error |= ERROR_UNKNOWN;
  }
}
 8000234:	e088      	b.n	8000348 <FLASH_IRQHandler+0x128>
  else if ((FLASH->SR & FLASH_SR_FWWERR) != 0) /* Check Fetch while Write error */
 8000236:	4b46      	ldr	r3, [pc, #280]	; (8000350 <FLASH_IRQHandler+0x130>)
 8000238:	699a      	ldr	r2, [r3, #24]
 800023a:	2380      	movs	r3, #128	; 0x80
 800023c:	029b      	lsls	r3, r3, #10
 800023e:	4013      	ands	r3, r2
 8000240:	d00b      	beq.n	800025a <FLASH_IRQHandler+0x3a>
    error |= ERROR_FETCH_DURING_PROG; /* Report the error to the main progran */
 8000242:	4b44      	ldr	r3, [pc, #272]	; (8000354 <FLASH_IRQHandler+0x134>)
 8000244:	881b      	ldrh	r3, [r3, #0]
 8000246:	2240      	movs	r2, #64	; 0x40
 8000248:	4313      	orrs	r3, r2
 800024a:	b29a      	uxth	r2, r3
 800024c:	4b41      	ldr	r3, [pc, #260]	; (8000354 <FLASH_IRQHandler+0x134>)
 800024e:	801a      	strh	r2, [r3, #0]
    FLASH->SR = FLASH_SR_FWWERR; /* Clear the flag by software by writing it at 1*/
 8000250:	4b3f      	ldr	r3, [pc, #252]	; (8000350 <FLASH_IRQHandler+0x130>)
 8000252:	2280      	movs	r2, #128	; 0x80
 8000254:	0292      	lsls	r2, r2, #10
 8000256:	619a      	str	r2, [r3, #24]
}
 8000258:	e076      	b.n	8000348 <FLASH_IRQHandler+0x128>
  else if ((FLASH->SR & FLASH_SR_NOTZEROERR) != 0) /* Check Not Zero error */
 800025a:	4b3d      	ldr	r3, [pc, #244]	; (8000350 <FLASH_IRQHandler+0x130>)
 800025c:	699a      	ldr	r2, [r3, #24]
 800025e:	2380      	movs	r3, #128	; 0x80
 8000260:	025b      	lsls	r3, r3, #9
 8000262:	4013      	ands	r3, r2
 8000264:	d00c      	beq.n	8000280 <FLASH_IRQHandler+0x60>
    error |= ERROR_NOT_ZERO; /* Report the error to the main progran */
 8000266:	4b3b      	ldr	r3, [pc, #236]	; (8000354 <FLASH_IRQHandler+0x134>)
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	2280      	movs	r2, #128	; 0x80
 800026c:	0092      	lsls	r2, r2, #2
 800026e:	4313      	orrs	r3, r2
 8000270:	b29a      	uxth	r2, r3
 8000272:	4b38      	ldr	r3, [pc, #224]	; (8000354 <FLASH_IRQHandler+0x134>)
 8000274:	801a      	strh	r2, [r3, #0]
    FLASH->SR = FLASH_SR_NOTZEROERR; /* Clear the flag by software by writing it at 1*/
 8000276:	4b36      	ldr	r3, [pc, #216]	; (8000350 <FLASH_IRQHandler+0x130>)
 8000278:	2280      	movs	r2, #128	; 0x80
 800027a:	0252      	lsls	r2, r2, #9
 800027c:	619a      	str	r2, [r3, #24]
}
 800027e:	e063      	b.n	8000348 <FLASH_IRQHandler+0x128>
  else if ((FLASH->SR & FLASH_SR_SIZERR) != 0) /* Check Size error */
 8000280:	4b33      	ldr	r3, [pc, #204]	; (8000350 <FLASH_IRQHandler+0x130>)
 8000282:	699a      	ldr	r2, [r3, #24]
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	00db      	lsls	r3, r3, #3
 8000288:	4013      	ands	r3, r2
 800028a:	d00b      	beq.n	80002a4 <FLASH_IRQHandler+0x84>
    error |= ERROR_SIZE; /* Report the error to the main progran */
 800028c:	4b31      	ldr	r3, [pc, #196]	; (8000354 <FLASH_IRQHandler+0x134>)
 800028e:	881b      	ldrh	r3, [r3, #0]
 8000290:	2280      	movs	r2, #128	; 0x80
 8000292:	4313      	orrs	r3, r2
 8000294:	b29a      	uxth	r2, r3
 8000296:	4b2f      	ldr	r3, [pc, #188]	; (8000354 <FLASH_IRQHandler+0x134>)
 8000298:	801a      	strh	r2, [r3, #0]
    FLASH->SR = FLASH_SR_SIZERR; /* Clear the flag by software by writing it at 1*/
 800029a:	4b2d      	ldr	r3, [pc, #180]	; (8000350 <FLASH_IRQHandler+0x130>)
 800029c:	2280      	movs	r2, #128	; 0x80
 800029e:	00d2      	lsls	r2, r2, #3
 80002a0:	619a      	str	r2, [r3, #24]
}
 80002a2:	e051      	b.n	8000348 <FLASH_IRQHandler+0x128>
  else if ((FLASH->SR & FLASH_SR_WRPERR) != 0) /* Check Write protection error */
 80002a4:	4b2a      	ldr	r3, [pc, #168]	; (8000350 <FLASH_IRQHandler+0x130>)
 80002a6:	699a      	ldr	r2, [r3, #24]
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	4013      	ands	r3, r2
 80002ae:	d00b      	beq.n	80002c8 <FLASH_IRQHandler+0xa8>
    error |= ERROR_WRITE_PROTECTION; /* Report the error to the main progran */
 80002b0:	4b28      	ldr	r3, [pc, #160]	; (8000354 <FLASH_IRQHandler+0x134>)
 80002b2:	881b      	ldrh	r3, [r3, #0]
 80002b4:	2210      	movs	r2, #16
 80002b6:	4313      	orrs	r3, r2
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	4b26      	ldr	r3, [pc, #152]	; (8000354 <FLASH_IRQHandler+0x134>)
 80002bc:	801a      	strh	r2, [r3, #0]
    FLASH->SR = FLASH_SR_WRPERR; /* Clear the flag by software by writing it at 1*/
 80002be:	4b24      	ldr	r3, [pc, #144]	; (8000350 <FLASH_IRQHandler+0x130>)
 80002c0:	2280      	movs	r2, #128	; 0x80
 80002c2:	0052      	lsls	r2, r2, #1
 80002c4:	619a      	str	r2, [r3, #24]
}
 80002c6:	e03f      	b.n	8000348 <FLASH_IRQHandler+0x128>
  else if ((FLASH->SR & FLASH_SR_RDERR) != 0) /* Check Read-out protection error */
 80002c8:	4b21      	ldr	r3, [pc, #132]	; (8000350 <FLASH_IRQHandler+0x130>)
 80002ca:	699a      	ldr	r2, [r3, #24]
 80002cc:	2380      	movs	r3, #128	; 0x80
 80002ce:	019b      	lsls	r3, r3, #6
 80002d0:	4013      	ands	r3, r2
 80002d2:	d00b      	beq.n	80002ec <FLASH_IRQHandler+0xcc>
    error |= ERROR_READOUT_PROTECTION; /* Report the error to the main progran */
 80002d4:	4b1f      	ldr	r3, [pc, #124]	; (8000354 <FLASH_IRQHandler+0x134>)
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	2220      	movs	r2, #32
 80002da:	4313      	orrs	r3, r2
 80002dc:	b29a      	uxth	r2, r3
 80002de:	4b1d      	ldr	r3, [pc, #116]	; (8000354 <FLASH_IRQHandler+0x134>)
 80002e0:	801a      	strh	r2, [r3, #0]
    FLASH->SR = FLASH_SR_RDERR; /* Clear the flag by software by writing it at 1*/
 80002e2:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <FLASH_IRQHandler+0x130>)
 80002e4:	2280      	movs	r2, #128	; 0x80
 80002e6:	0192      	lsls	r2, r2, #6
 80002e8:	619a      	str	r2, [r3, #24]
}
 80002ea:	e02d      	b.n	8000348 <FLASH_IRQHandler+0x128>
  else if ((FLASH->SR & FLASH_SR_OPTVERR) != 0) /* Check Option valid error */
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <FLASH_IRQHandler+0x130>)
 80002ee:	699a      	ldr	r2, [r3, #24]
 80002f0:	2380      	movs	r3, #128	; 0x80
 80002f2:	011b      	lsls	r3, r3, #4
 80002f4:	4013      	ands	r3, r2
 80002f6:	d00c      	beq.n	8000312 <FLASH_IRQHandler+0xf2>
    error |= ERROR_OPTION_NOT_VALID; /* Report the error to the main progran */
 80002f8:	4b16      	ldr	r3, [pc, #88]	; (8000354 <FLASH_IRQHandler+0x134>)
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	2280      	movs	r2, #128	; 0x80
 80002fe:	00d2      	lsls	r2, r2, #3
 8000300:	4313      	orrs	r3, r2
 8000302:	b29a      	uxth	r2, r3
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <FLASH_IRQHandler+0x134>)
 8000306:	801a      	strh	r2, [r3, #0]
    FLASH->SR = FLASH_SR_OPTVERR; /* Clear the flag by software by writing it at 1*/
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <FLASH_IRQHandler+0x130>)
 800030a:	2280      	movs	r2, #128	; 0x80
 800030c:	0112      	lsls	r2, r2, #4
 800030e:	619a      	str	r2, [r3, #24]
}
 8000310:	e01a      	b.n	8000348 <FLASH_IRQHandler+0x128>
  else if ((FLASH->SR & FLASH_SR_PGAERR) != 0) /* Check alignment error */
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <FLASH_IRQHandler+0x130>)
 8000314:	699a      	ldr	r2, [r3, #24]
 8000316:	2380      	movs	r3, #128	; 0x80
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	4013      	ands	r3, r2
 800031c:	d00c      	beq.n	8000338 <FLASH_IRQHandler+0x118>
    error |= ERROR_ALIGNMENT; /* Report the error to the main progran */
 800031e:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <FLASH_IRQHandler+0x134>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	2280      	movs	r2, #128	; 0x80
 8000324:	0052      	lsls	r2, r2, #1
 8000326:	4313      	orrs	r3, r2
 8000328:	b29a      	uxth	r2, r3
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <FLASH_IRQHandler+0x134>)
 800032c:	801a      	strh	r2, [r3, #0]
    FLASH->SR = FLASH_SR_PGAERR; /* Clear the flag by software by writing it at 1*/
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <FLASH_IRQHandler+0x130>)
 8000330:	2280      	movs	r2, #128	; 0x80
 8000332:	0092      	lsls	r2, r2, #2
 8000334:	619a      	str	r2, [r3, #24]
}
 8000336:	e007      	b.n	8000348 <FLASH_IRQHandler+0x128>
    error |= ERROR_UNKNOWN;
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <FLASH_IRQHandler+0x134>)
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	2280      	movs	r2, #128	; 0x80
 800033e:	0112      	lsls	r2, r2, #4
 8000340:	4313      	orrs	r3, r2
 8000342:	b29a      	uxth	r2, r3
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <FLASH_IRQHandler+0x134>)
 8000346:	801a      	strh	r2, [r3, #0]
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	40022000 	.word	0x40022000
 8000354:	20000040 	.word	0x20000040

08000358 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <LL_RCC_HSI_Enable+0x18>)
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <LL_RCC_HSI_Enable+0x18>)
 8000362:	2101      	movs	r1, #1
 8000364:	430a      	orrs	r2, r1
 8000366:	601a      	str	r2, [r3, #0]
}
 8000368:	46c0      	nop			; (mov r8, r8)
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	40021000 	.word	0x40021000

08000374 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <LL_RCC_HSI_IsReady+0x1c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2204      	movs	r2, #4
 800037e:	4013      	ands	r3, r2
 8000380:	2b04      	cmp	r3, #4
 8000382:	d101      	bne.n	8000388 <LL_RCC_HSI_IsReady+0x14>
 8000384:	2301      	movs	r3, #1
 8000386:	e000      	b.n	800038a <LL_RCC_HSI_IsReady+0x16>
 8000388:	2300      	movs	r3, #0
}
 800038a:	0018      	movs	r0, r3
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000

08000394 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	4a06      	ldr	r2, [pc, #24]	; (80003bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80003a2:	4013      	ands	r3, r2
 80003a4:	0019      	movs	r1, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	021a      	lsls	r2, r3, #8
 80003aa:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80003ac:	430a      	orrs	r2, r1
 80003ae:	605a      	str	r2, [r3, #4]
}
 80003b0:	46c0      	nop			; (mov r8, r8)
 80003b2:	46bd      	mov	sp, r7
 80003b4:	b002      	add	sp, #8
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40021000 	.word	0x40021000
 80003bc:	ffffe0ff 	.word	0xffffe0ff

080003c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <LL_RCC_SetSysClkSource+0x24>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	2203      	movs	r2, #3
 80003ce:	4393      	bics	r3, r2
 80003d0:	0019      	movs	r1, r3
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <LL_RCC_SetSysClkSource+0x24>)
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	430a      	orrs	r2, r1
 80003d8:	60da      	str	r2, [r3, #12]
}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b002      	add	sp, #8
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	40021000 	.word	0x40021000

080003e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <LL_RCC_GetSysClkSource+0x14>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	220c      	movs	r2, #12
 80003f2:	4013      	ands	r3, r2
}
 80003f4:	0018      	movs	r0, r3
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	40021000 	.word	0x40021000

08000400 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <LL_RCC_SetAHBPrescaler+0x24>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	22f0      	movs	r2, #240	; 0xf0
 800040e:	4393      	bics	r3, r2
 8000410:	0019      	movs	r1, r3
 8000412:	4b04      	ldr	r3, [pc, #16]	; (8000424 <LL_RCC_SetAHBPrescaler+0x24>)
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	430a      	orrs	r2, r1
 8000418:	60da      	str	r2, [r3, #12]
}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b002      	add	sp, #8
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	40021000 	.word	0x40021000

08000428 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000432:	68db      	ldr	r3, [r3, #12]
 8000434:	4a06      	ldr	r2, [pc, #24]	; (8000450 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000436:	4013      	ands	r3, r2
 8000438:	0019      	movs	r1, r3
 800043a:	4b04      	ldr	r3, [pc, #16]	; (800044c <LL_RCC_SetAPB1Prescaler+0x24>)
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	430a      	orrs	r2, r1
 8000440:	60da      	str	r2, [r3, #12]
}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	40021000 	.word	0x40021000
 8000450:	fffff8ff 	.word	0xfffff8ff

08000454 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <LL_RCC_SetAPB2Prescaler+0x24>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	4a06      	ldr	r2, [pc, #24]	; (800047c <LL_RCC_SetAPB2Prescaler+0x28>)
 8000462:	4013      	ands	r3, r2
 8000464:	0019      	movs	r1, r3
 8000466:	4b04      	ldr	r3, [pc, #16]	; (8000478 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	430a      	orrs	r2, r1
 800046c:	60da      	str	r2, [r3, #12]
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	40021000 	.word	0x40021000
 800047c:	ffffc7ff 	.word	0xffffc7ff

08000480 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <LL_RCC_SetUSARTClockSource+0x2c>)
 800048a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	0c12      	lsrs	r2, r2, #16
 8000490:	43d2      	mvns	r2, r2
 8000492:	401a      	ands	r2, r3
 8000494:	0011      	movs	r1, r2
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	041b      	lsls	r3, r3, #16
 800049a:	0c1a      	lsrs	r2, r3, #16
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <LL_RCC_SetUSARTClockSource+0x2c>)
 800049e:	430a      	orrs	r2, r1
 80004a0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b002      	add	sp, #8
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	40021000 	.word	0x40021000

080004b0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <LL_RCC_PLL_Enable+0x18>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b03      	ldr	r3, [pc, #12]	; (80004c8 <LL_RCC_PLL_Enable+0x18>)
 80004ba:	2180      	movs	r1, #128	; 0x80
 80004bc:	0449      	lsls	r1, r1, #17
 80004be:	430a      	orrs	r2, r1
 80004c0:	601a      	str	r2, [r3, #0]
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000

080004cc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <LL_RCC_PLL_IsReady+0x24>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	049b      	lsls	r3, r3, #18
 80004d8:	401a      	ands	r2, r3
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	049b      	lsls	r3, r3, #18
 80004de:	429a      	cmp	r2, r3
 80004e0:	d101      	bne.n	80004e6 <LL_RCC_PLL_IsReady+0x1a>
 80004e2:	2301      	movs	r3, #1
 80004e4:	e000      	b.n	80004e8 <LL_RCC_PLL_IsReady+0x1c>
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	0018      	movs	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000

080004f4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <LL_RCC_PLL_ConfigDomain_SYS+0x34>)
 8000506:	4013      	ands	r3, r2
 8000508:	0019      	movs	r1, r3
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	431a      	orrs	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	431a      	orrs	r2, r3
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000516:	430a      	orrs	r2, r1
 8000518:	60da      	str	r2, [r3, #12]
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b004      	add	sp, #16
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	40021000 	.word	0x40021000
 8000528:	ff02ffff 	.word	0xff02ffff

0800052c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <LL_APB1_GRP1_EnableClock+0x28>)
 8000536:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <LL_APB1_GRP1_EnableClock+0x28>)
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	430a      	orrs	r2, r1
 800053e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <LL_APB1_GRP1_EnableClock+0x28>)
 8000542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4013      	ands	r3, r2
 8000548:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800054a:	68fb      	ldr	r3, [r7, #12]
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b004      	add	sp, #16
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40021000 	.word	0x40021000

08000558 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <LL_APB2_GRP1_EnableClock+0x28>)
 8000562:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <LL_APB2_GRP1_EnableClock+0x28>)
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	430a      	orrs	r2, r1
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <LL_APB2_GRP1_EnableClock+0x28>)
 800056e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	4013      	ands	r3, r2
 8000574:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b004      	add	sp, #16
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000

08000584 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <LL_IOP_GRP1_EnableClock+0x28>)
 800058e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <LL_IOP_GRP1_EnableClock+0x28>)
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	430a      	orrs	r2, r1
 8000596:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b004      	add	sp, #16
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000

080005b0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <LL_FLASH_SetLatency+0x24>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2201      	movs	r2, #1
 80005be:	4393      	bics	r3, r2
 80005c0:	0019      	movs	r1, r3
 80005c2:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <LL_FLASH_SetLatency+0x24>)
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	601a      	str	r2, [r3, #0]
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40022000 	.word	0x40022000

080005d8 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <LL_FLASH_GetLatency+0x14>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2201      	movs	r2, #1
 80005e2:	4013      	ands	r3, r2
}
 80005e4:	0018      	movs	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	40022000 	.word	0x40022000

080005f0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <LL_PWR_SetRegulVoltageScaling+0x28>)
 80005fe:	4013      	ands	r3, r2
 8000600:	0019      	movs	r1, r3
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	430a      	orrs	r2, r1
 8000608:	601a      	str	r2, [r3, #0]
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	40007000 	.word	0x40007000
 8000618:	ffffe7ff 	.word	0xffffe7ff

0800061c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2201      	movs	r2, #1
 800062a:	431a      	orrs	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	601a      	str	r2, [r3, #0]
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b002      	add	sp, #8
 8000636:	bd80      	pop	{r7, pc}

08000638 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <LL_USART_ConfigAsyncMode+0x2c>)
 8000646:	401a      	ands	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	222a      	movs	r2, #42	; 0x2a
 8000652:	4393      	bics	r3, r2
 8000654:	001a      	movs	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	609a      	str	r2, [r3, #8]
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	ffffb7ff 	.word	0xffffb7ff

08000668 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	683a      	ldr	r2, [r7, #0]
 8000676:	619a      	str	r2, [r3, #24]
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b002      	add	sp, #8
 800067e:	bd80      	pop	{r7, pc}

08000680 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b002      	add	sp, #8
 8000696:	bd80      	pop	{r7, pc}

08000698 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	4013      	ands	r3, r2
 80006ae:	041a      	lsls	r2, r3, #16
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	43db      	mvns	r3, r3
 80006b4:	6839      	ldr	r1, [r7, #0]
 80006b6:	400b      	ands	r3, r1
 80006b8:	431a      	orrs	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	619a      	str	r2, [r3, #24]
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b004      	add	sp, #16
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff43 	bl	8000558 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006d2:	2380      	movs	r3, #128	; 0x80
 80006d4:	055b      	lsls	r3, r3, #21
 80006d6:	0018      	movs	r0, r3
 80006d8:	f7ff ff28 	bl	800052c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f89e 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 f964 	bl	80009ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e4:	f000 f8ea 	bl	80008bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	  //LL_mDelay(DeadTime); // for safety reasons. To make sure minimum time between toggeling relays
  if (Wachttijdnaheengaan < DeadTime)
 80006e8:	4b43      	ldr	r3, [pc, #268]	; (80007f8 <main+0x130>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b43      	ldr	r3, [pc, #268]	; (80007fc <main+0x134>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	da03      	bge.n	80006fc <main+0x34>
  	  {
	  	  Wachttijdnaheengaan = DeadTime;
 80006f4:	4b41      	ldr	r3, [pc, #260]	; (80007fc <main+0x134>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b3f      	ldr	r3, [pc, #252]	; (80007f8 <main+0x130>)
 80006fa:	601a      	str	r2, [r3, #0]
  	  }
  if (Wachttijdnaterugkomen < DeadTime)
 80006fc:	4b40      	ldr	r3, [pc, #256]	; (8000800 <main+0x138>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b3e      	ldr	r3, [pc, #248]	; (80007fc <main+0x134>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	da03      	bge.n	8000710 <main+0x48>
	  {
	  	  Wachttijdnaterugkomen = DeadTime;
 8000708:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <main+0x134>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b3c      	ldr	r3, [pc, #240]	; (8000800 <main+0x138>)
 800070e:	601a      	str	r2, [r3, #0]
	  }
  Period = Heengaandetijd + Teruggaandetijd + (2*DeadTime);
 8000710:	4b3c      	ldr	r3, [pc, #240]	; (8000804 <main+0x13c>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b3c      	ldr	r3, [pc, #240]	; (8000808 <main+0x140>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	18d2      	adds	r2, r2, r3
 800071a:	4b38      	ldr	r3, [pc, #224]	; (80007fc <main+0x134>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	18d2      	adds	r2, r2, r3
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <main+0x144>)
 8000724:	601a      	str	r2, [r3, #0]
  SwitchoverTime1 =Wachttijdnaheengaan-DeadTime;
 8000726:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <main+0x130>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4b34      	ldr	r3, [pc, #208]	; (80007fc <main+0x134>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1ad2      	subs	r2, r2, r3
 8000730:	4b37      	ldr	r3, [pc, #220]	; (8000810 <main+0x148>)
 8000732:	601a      	str	r2, [r3, #0]
  SwitchoverTime2 =Wachttijdnaterugkomen-DeadTime;
 8000734:	4b32      	ldr	r3, [pc, #200]	; (8000800 <main+0x138>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <main+0x134>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	1ad2      	subs	r2, r2, r3
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <main+0x14c>)
 8000740:	601a      	str	r2, [r3, #0]
 *DeadTime = time required to toggle motor for diretion. time required where as both relays are not energiezed thus open.
 * delay tussen t0 en t1  ; delay tussen t2 en t3 -> to avoid short circuit of the channel.
*/

	  // @ t = t0
	  	  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_4);
 8000742:	23a0      	movs	r3, #160	; 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2110      	movs	r1, #16
 8000748:	0018      	movs	r0, r3
 800074a:	f7ff ffa5 	bl	8000698 <LL_GPIO_TogglePin>
	  	  LL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800074e:	4b32      	ldr	r3, [pc, #200]	; (8000818 <main+0x150>)
 8000750:	2108      	movs	r1, #8
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff ffa0 	bl	8000698 <LL_GPIO_TogglePin>
	  	  /*wait ms to avoid cross conduction*/
	  	  LL_mDelay(DeadTime);
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <main+0x134>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	0018      	movs	r0, r3
 800075e:	f000 fe81 	bl	8001464 <LL_mDelay>
	      LL_mDelay(SwitchoverTime2);
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <main+0x14c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fe7c 	bl	8001464 <LL_mDelay>
	  // @ t = t1
	  	  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_1);
 800076c:	23a0      	movs	r3, #160	; 0xa0
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	2102      	movs	r1, #2
 8000772:	0018      	movs	r0, r3
 8000774:	f7ff ff90 	bl	8000698 <LL_GPIO_TogglePin>
	  	LL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <main+0x150>)
 800077a:	2108      	movs	r1, #8
 800077c:	0018      	movs	r0, r3
 800077e:	f7ff ff8b 	bl	8000698 <LL_GPIO_TogglePin>
	  	  LL_mDelay((Period/2)-DeadTime);
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <main+0x144>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da00      	bge.n	800078c <main+0xc4>
 800078a:	3301      	adds	r3, #1
 800078c:	105b      	asrs	r3, r3, #1
 800078e:	001a      	movs	r2, r3
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <main+0x134>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fe64 	bl	8001464 <LL_mDelay>
	  // @ t = t2
	  	  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_1);
 800079c:	23a0      	movs	r3, #160	; 0xa0
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	2102      	movs	r1, #2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff ff78 	bl	8000698 <LL_GPIO_TogglePin>
	  	LL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <main+0x150>)
 80007aa:	2108      	movs	r1, #8
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff ff73 	bl	8000698 <LL_GPIO_TogglePin>
	  	  LL_mDelay(DeadTime);
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <main+0x134>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fe54 	bl	8001464 <LL_mDelay>
	  	  LL_mDelay(SwitchoverTime1);
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <main+0x148>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fe4f 	bl	8001464 <LL_mDelay>
	  // @ t = t3
	   	  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_4);
 80007c6:	23a0      	movs	r3, #160	; 0xa0
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	2110      	movs	r1, #16
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff ff63 	bl	8000698 <LL_GPIO_TogglePin>
	   	  LL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <main+0x150>)
 80007d4:	2108      	movs	r1, #8
 80007d6:	0018      	movs	r0, r3
 80007d8:	f7ff ff5e 	bl	8000698 <LL_GPIO_TogglePin>
	   	  LL_mDelay((Period/2)-DeadTime);
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <main+0x144>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	da00      	bge.n	80007e6 <main+0x11e>
 80007e4:	3301      	adds	r3, #1
 80007e6:	105b      	asrs	r3, r3, #1
 80007e8:	001a      	movs	r2, r3
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <main+0x134>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 fe37 	bl	8001464 <LL_mDelay>
	  	  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_4);
 80007f6:	e7a4      	b.n	8000742 <main+0x7a>
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000014 	.word	0x20000014
 8000800:	2000000c 	.word	0x2000000c
 8000804:	20000000 	.word	0x20000000
 8000808:	20000004 	.word	0x20000004
 800080c:	20000010 	.word	0x20000010
 8000810:	20000018 	.word	0x20000018
 8000814:	2000001c 	.word	0x2000001c
 8000818:	50000400 	.word	0x50000400

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff fec5 	bl	80005b0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	f7ff fed6 	bl	80005d8 <LL_FLASH_GetLatency>
 800082c:	0003      	movs	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d1fa      	bne.n	8000828 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	011b      	lsls	r3, r3, #4
 8000836:	0018      	movs	r0, r3
 8000838:	f7ff feda 	bl	80005f0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800083c:	f7ff fd8c 	bl	8000358 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	f7ff fd97 	bl	8000374 <LL_RCC_HSI_IsReady>
 8000846:	0003      	movs	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d1fa      	bne.n	8000842 <SystemClock_Config+0x26>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800084c:	2010      	movs	r0, #16
 800084e:	f7ff fda1 	bl	8000394 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_4, LL_RCC_PLL_DIV_2);
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	03da      	lsls	r2, r3, #15
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	02db      	lsls	r3, r3, #11
 800085a:	0019      	movs	r1, r3
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff fe49 	bl	80004f4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000862:	f7ff fe25 	bl	80004b0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	f7ff fe30 	bl	80004cc <LL_RCC_PLL_IsReady>
 800086c:	0003      	movs	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d1fa      	bne.n	8000868 <SystemClock_Config+0x4c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fdc4 	bl	8000400 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff fdd5 	bl	8000428 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff fde8 	bl	8000454 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000884:	2003      	movs	r0, #3
 8000886:	f7ff fd9b 	bl	80003c0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	f7ff fdac 	bl	80003e8 <LL_RCC_GetSysClkSource>
 8000890:	0003      	movs	r3, r0
 8000892:	2b0c      	cmp	r3, #12
 8000894:	d1fa      	bne.n	800088c <SystemClock_Config+0x70>
  {

  }

  LL_Init1msTick(32000000);
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <SystemClock_Config+0x9c>)
 8000898:	0018      	movs	r0, r3
 800089a:	f000 fdd3 	bl	8001444 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <SystemClock_Config+0x9c>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 fe01 	bl	80014a8 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80008a6:	23c0      	movs	r3, #192	; 0xc0
 80008a8:	031b      	lsls	r3, r3, #12
 80008aa:	0018      	movs	r0, r3
 80008ac:	f7ff fde8 	bl	8000480 <LL_RCC_SetUSARTClockSource>
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	01e84800 	.word	0x01e84800

080008bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b08f      	sub	sp, #60	; 0x3c
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80008c2:	241c      	movs	r4, #28
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	0018      	movs	r0, r3
 80008c8:	231c      	movs	r3, #28
 80008ca:	001a      	movs	r2, r3
 80008cc:	2100      	movs	r1, #0
 80008ce:	f000 fe1d 	bl	800150c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	0018      	movs	r0, r3
 80008d6:	2318      	movs	r3, #24
 80008d8:	001a      	movs	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	f000 fe16 	bl	800150c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	029b      	lsls	r3, r3, #10
 80008e4:	0018      	movs	r0, r3
 80008e6:	f7ff fe21 	bl	800052c <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f7ff fe4a 	bl	8000584 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2204      	movs	r2, #4
 80008f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2202      	movs	r2, #2
 80008fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2203      	movs	r2, #3
 8000900:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2204      	movs	r2, #4
 8000912:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000914:	1d3a      	adds	r2, r7, #4
 8000916:	23a0      	movs	r3, #160	; 0xa0
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f000 fab7 	bl	8000e90 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	0212      	lsls	r2, r2, #8
 8000928:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2202      	movs	r2, #2
 800092e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2203      	movs	r2, #3
 8000934:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2204      	movs	r2, #4
 8000946:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000948:	1d3a      	adds	r2, r7, #4
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fa9d 	bl	8000e90 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	22e1      	movs	r2, #225	; 0xe1
 800095a:	0252      	lsls	r2, r2, #9
 800095c:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800095e:	0021      	movs	r1, r4
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	220c      	movs	r2, #12
 8000976:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000984:	187b      	adds	r3, r7, r1
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <MX_USART2_UART_Init+0xec>)
 8000988:	0019      	movs	r1, r3
 800098a:	0010      	movs	r0, r2
 800098c:	f000 fce8 	bl	8001360 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <MX_USART2_UART_Init+0xec>)
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff fe50 	bl	8000638 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <MX_USART2_UART_Init+0xec>)
 800099a:	0018      	movs	r0, r3
 800099c:	f7ff fe3e 	bl	800061c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b00f      	add	sp, #60	; 0x3c
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	40004400 	.word	0x40004400

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	003b      	movs	r3, r7
 80009b4:	0018      	movs	r0, r3
 80009b6:	2318      	movs	r3, #24
 80009b8:	001a      	movs	r2, r3
 80009ba:	2100      	movs	r1, #0
 80009bc:	f000 fda6 	bl	800150c <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80009c0:	2004      	movs	r0, #4
 80009c2:	f7ff fddf 	bl	8000584 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff fddc 	bl	8000584 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80009cc:	2002      	movs	r0, #2
 80009ce:	f7ff fdd9 	bl	8000584 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 80009d2:	23a0      	movs	r3, #160	; 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	2102      	movs	r1, #2
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff fe51 	bl	8000680 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80009de:	23a0      	movs	r3, #160	; 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	2108      	movs	r1, #8
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff fe3f 	bl	8000668 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80009ea:	23a0      	movs	r3, #160	; 0xa0
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	2110      	movs	r1, #16
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff fe39 	bl	8000668 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LD3_GPIO_Port, LD3_Pin);
 80009f6:	4ba4      	ldr	r3, [pc, #656]	; (8000c88 <MX_GPIO_Init+0x2dc>)
 80009f8:	2108      	movs	r1, #8
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff fe34 	bl	8000668 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000a00:	003b      	movs	r3, r7
 8000a02:	2201      	movs	r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a06:	003b      	movs	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a0c:	003b      	movs	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	003a      	movs	r2, r7
 8000a14:	23a0      	movs	r3, #160	; 0xa0
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fa38 	bl	8000e90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000a20:	003b      	movs	r3, r7
 8000a22:	2202      	movs	r2, #2
 8000a24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a26:	003b      	movs	r3, r7
 8000a28:	2201      	movs	r2, #1
 8000a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a2c:	003b      	movs	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a32:	003b      	movs	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a38:	003b      	movs	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	003a      	movs	r2, r7
 8000a40:	23a0      	movs	r3, #160	; 0xa0
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	0011      	movs	r1, r2
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 fa22 	bl	8000e90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000a4c:	003b      	movs	r3, r7
 8000a4e:	2208      	movs	r2, #8
 8000a50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a52:	003b      	movs	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000a58:	003b      	movs	r3, r7
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	003a      	movs	r2, r7
 8000a60:	23a0      	movs	r3, #160	; 0xa0
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fa12 	bl	8000e90 <LL_GPIO_Init>

  /**/  /*Dit is PIN 9 OF A3 van het nucleo bord */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000a6c:	003b      	movs	r3, r7
 8000a6e:	2210      	movs	r2, #16
 8000a70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2201      	movs	r2, #1
 8000a76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a7e:	003b      	movs	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a84:	003b      	movs	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	003a      	movs	r2, r7
 8000a8c:	23a0      	movs	r3, #160	; 0xa0
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	0011      	movs	r1, r2
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 f9fc 	bl	8000e90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000a98:	003b      	movs	r3, r7
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	003a      	movs	r2, r7
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 f9ec 	bl	8000e90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000ab8:	003b      	movs	r3, r7
 8000aba:	2240      	movs	r2, #64	; 0x40
 8000abc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000abe:	003b      	movs	r3, r7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000ac4:	003b      	movs	r3, r7
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	003a      	movs	r2, r7
 8000acc:	23a0      	movs	r3, #160	; 0xa0
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 f9dc 	bl	8000e90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000ad8:	003b      	movs	r3, r7
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ade:	003b      	movs	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000ae4:	003b      	movs	r3, r7
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	003a      	movs	r2, r7
 8000aec:	23a0      	movs	r3, #160	; 0xa0
 8000aee:	05db      	lsls	r3, r3, #23
 8000af0:	0011      	movs	r1, r2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 f9cc 	bl	8000e90 <LL_GPIO_Init>


  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000af8:	003b      	movs	r3, r7
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	0052      	lsls	r2, r2, #1
 8000afe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b00:	003b      	movs	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000b06:	003b      	movs	r3, r7
 8000b08:	2202      	movs	r2, #2
 8000b0a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	003a      	movs	r2, r7
 8000b0e:	23a0      	movs	r3, #160	; 0xa0
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 f9bb 	bl	8000e90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	0092      	lsls	r2, r2, #2
 8000b20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b22:	003b      	movs	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	003a      	movs	r2, r7
 8000b30:	23a0      	movs	r3, #160	; 0xa0
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	0011      	movs	r1, r2
 8000b36:	0018      	movs	r0, r3
 8000b38:	f000 f9aa 	bl	8000e90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b3c:	003b      	movs	r3, r7
 8000b3e:	2280      	movs	r2, #128	; 0x80
 8000b40:	00d2      	lsls	r2, r2, #3
 8000b42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b44:	003b      	movs	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	003a      	movs	r2, r7
 8000b52:	23a0      	movs	r3, #160	; 0xa0
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 f999 	bl	8000e90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000b5e:	003b      	movs	r3, r7
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2202      	movs	r2, #2
 8000b70:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	003a      	movs	r2, r7
 8000b74:	23a0      	movs	r3, #160	; 0xa0
 8000b76:	05db      	lsls	r3, r3, #23
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 f988 	bl	8000e90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000b80:	003b      	movs	r3, r7
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	0152      	lsls	r2, r2, #5
 8000b86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b88:	003b      	movs	r3, r7
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000b8e:	003b      	movs	r3, r7
 8000b90:	2202      	movs	r2, #2
 8000b92:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	003a      	movs	r2, r7
 8000b96:	23a0      	movs	r3, #160	; 0xa0
 8000b98:	05db      	lsls	r3, r3, #23
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 f977 	bl	8000e90 <LL_GPIO_Init>


  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ba8:	003b      	movs	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000bae:	003b      	movs	r3, r7
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	003b      	movs	r3, r7
 8000bb6:	4a34      	ldr	r2, [pc, #208]	; (8000c88 <MX_GPIO_Init+0x2dc>)
 8000bb8:	0019      	movs	r1, r3
 8000bba:	0010      	movs	r0, r2
 8000bbc:	f000 f968 	bl	8000e90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000bc0:	003b      	movs	r3, r7
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bc6:	003b      	movs	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000bcc:	003b      	movs	r3, r7
 8000bce:	2202      	movs	r2, #2
 8000bd0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	003b      	movs	r3, r7
 8000bd4:	4a2c      	ldr	r2, [pc, #176]	; (8000c88 <MX_GPIO_Init+0x2dc>)
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	0010      	movs	r0, r2
 8000bda:	f000 f959 	bl	8000e90 <LL_GPIO_Init>


  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 8000bde:	003b      	movs	r3, r7
 8000be0:	2208      	movs	r2, #8
 8000be2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000be4:	003b      	movs	r3, r7
 8000be6:	2201      	movs	r2, #1
 8000be8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bea:	003b      	movs	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bf0:	003b      	movs	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bf6:	003b      	movs	r3, r7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	003b      	movs	r3, r7
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <MX_GPIO_Init+0x2dc>)
 8000c00:	0019      	movs	r1, r3
 8000c02:	0010      	movs	r0, r2
 8000c04:	f000 f944 	bl	8000e90 <LL_GPIO_Init>


  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000c08:	003b      	movs	r3, r7
 8000c0a:	2210      	movs	r2, #16
 8000c0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c0e:	003b      	movs	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000c14:	003b      	movs	r3, r7
 8000c16:	2202      	movs	r2, #2
 8000c18:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	003b      	movs	r3, r7
 8000c1c:	4a1a      	ldr	r2, [pc, #104]	; (8000c88 <MX_GPIO_Init+0x2dc>)
 8000c1e:	0019      	movs	r1, r3
 8000c20:	0010      	movs	r0, r2
 8000c22:	f000 f935 	bl	8000e90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000c26:	003b      	movs	r3, r7
 8000c28:	2220      	movs	r2, #32
 8000c2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c2c:	003b      	movs	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000c32:	003b      	movs	r3, r7
 8000c34:	2202      	movs	r2, #2
 8000c36:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	003b      	movs	r3, r7
 8000c3a:	4a13      	ldr	r2, [pc, #76]	; (8000c88 <MX_GPIO_Init+0x2dc>)
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	0010      	movs	r0, r2
 8000c40:	f000 f926 	bl	8000e90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000c44:	003b      	movs	r3, r7
 8000c46:	2240      	movs	r2, #64	; 0x40
 8000c48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c4a:	003b      	movs	r3, r7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000c50:	003b      	movs	r3, r7
 8000c52:	2202      	movs	r2, #2
 8000c54:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	003b      	movs	r3, r7
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <MX_GPIO_Init+0x2dc>)
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	0010      	movs	r0, r2
 8000c5e:	f000 f917 	bl	8000e90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000c62:	003b      	movs	r3, r7
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c68:	003b      	movs	r3, r7
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000c6e:	003b      	movs	r3, r7
 8000c70:	2202      	movs	r2, #2
 8000c72:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	003b      	movs	r3, r7
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <MX_GPIO_Init+0x2dc>)
 8000c78:	0019      	movs	r1, r3
 8000c7a:	0010      	movs	r0, r2
 8000c7c:	f000 f908 	bl	8000e90 <LL_GPIO_Init>

}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b006      	add	sp, #24
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	50000400 	.word	0x50000400

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000cba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0b      	ldr	r4, [pc, #44]	; (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ce2:	f000 f812 	bl	8000d0a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f000 fbed 	bl	80014c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fced 	bl	80006c8 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
   ldr   r0, =_estack
 8000cf0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000cfc:	08001560 	.word	0x08001560
  ldr r2, =_sbss
 8000d00:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000d04:	20000044 	.word	0x20000044

08000d08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_COMP_IRQHandler>

08000d0a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <LL_GPIO_SetPinMode>:
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6819      	ldr	r1, [r3, #0]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	435a      	muls	r2, r3
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	189b      	adds	r3, r3, r2
 8000d30:	43db      	mvns	r3, r3
 8000d32:	400b      	ands	r3, r1
 8000d34:	001a      	movs	r2, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	434b      	muls	r3, r1
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	434b      	muls	r3, r1
 8000d40:	431a      	orrs	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	601a      	str	r2, [r3, #0]
}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b004      	add	sp, #16
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <LL_GPIO_SetPinOutputType>:
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	43d2      	mvns	r2, r2
 8000d62:	401a      	ands	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	434b      	muls	r3, r1
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	605a      	str	r2, [r3, #4]
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b004      	add	sp, #16
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <LL_GPIO_SetPinSpeed>:
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6899      	ldr	r1, [r3, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	435a      	muls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	189b      	adds	r3, r3, r2
 8000d94:	43db      	mvns	r3, r3
 8000d96:	400b      	ands	r3, r1
 8000d98:	001a      	movs	r2, r3
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	434b      	muls	r3, r1
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	434b      	muls	r3, r1
 8000da4:	431a      	orrs	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	609a      	str	r2, [r3, #8]
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b004      	add	sp, #16
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <LL_GPIO_SetPinPull>:
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	68d9      	ldr	r1, [r3, #12]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	435a      	muls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	189b      	adds	r3, r3, r2
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	400b      	ands	r3, r1
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	434b      	muls	r3, r1
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	434b      	muls	r3, r1
 8000dde:	431a      	orrs	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	60da      	str	r2, [r3, #12]
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b004      	add	sp, #16
 8000dea:	bd80      	pop	{r7, pc}

08000dec <LL_GPIO_SetAFPin_0_7>:
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6a19      	ldr	r1, [r3, #32]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	4353      	muls	r3, r2
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	4353      	muls	r3, r2
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	435a      	muls	r2, r3
 8000e0a:	0013      	movs	r3, r2
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	43db      	mvns	r3, r3
 8000e12:	400b      	ands	r3, r1
 8000e14:	001a      	movs	r2, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	434b      	muls	r3, r1
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	434b      	muls	r3, r1
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	434b      	muls	r3, r1
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	434b      	muls	r3, r1
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	621a      	str	r2, [r3, #32]
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b004      	add	sp, #16
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <LL_GPIO_SetAFPin_8_15>:
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	0a12      	lsrs	r2, r2, #8
 8000e4e:	4353      	muls	r3, r2
 8000e50:	68ba      	ldr	r2, [r7, #8]
 8000e52:	0a12      	lsrs	r2, r2, #8
 8000e54:	4353      	muls	r3, r2
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	0a12      	lsrs	r2, r2, #8
 8000e5a:	435a      	muls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	1a9b      	subs	r3, r3, r2
 8000e62:	43db      	mvns	r3, r3
 8000e64:	400b      	ands	r3, r1
 8000e66:	001a      	movs	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	0a1b      	lsrs	r3, r3, #8
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	0a09      	lsrs	r1, r1, #8
 8000e70:	434b      	muls	r3, r1
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	0a09      	lsrs	r1, r1, #8
 8000e76:	434b      	muls	r3, r1
 8000e78:	68b9      	ldr	r1, [r7, #8]
 8000e7a:	0a09      	lsrs	r1, r1, #8
 8000e7c:	434b      	muls	r3, r1
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	434b      	muls	r3, r1
 8000e82:	431a      	orrs	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b004      	add	sp, #16
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000ea2:	e048      	b.n	8000f36 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4091      	lsls	r1, r2
 8000eae:	000a      	movs	r2, r1
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d03a      	beq.n	8000f30 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d003      	beq.n	8000eca <LL_GPIO_Init+0x3a>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d10e      	bne.n	8000ee8 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff ff50 	bl	8000d78 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	6819      	ldr	r1, [r3, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff ff33 	bl	8000d4e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff ff5e 	bl	8000db2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d111      	bne.n	8000f22 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2bff      	cmp	r3, #255	; 0xff
 8000f02:	d807      	bhi.n	8000f14 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	695a      	ldr	r2, [r3, #20]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff ff6d 	bl	8000dec <LL_GPIO_SetAFPin_0_7>
 8000f12:	e006      	b.n	8000f22 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	695a      	ldr	r2, [r3, #20]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ff8a 	bl	8000e36 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff fef2 	bl	8000d14 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3301      	adds	r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	40da      	lsrs	r2, r3
 8000f3e:	1e13      	subs	r3, r2, #0
 8000f40:	d1b0      	bne.n	8000ea4 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b004      	add	sp, #16
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <LL_RCC_HSI_IsReady>:
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <LL_RCC_HSI_IsReady+0x1c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2204      	movs	r2, #4
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d101      	bne.n	8000f60 <LL_RCC_HSI_IsReady+0x14>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <LL_RCC_HSI_IsReady+0x16>
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40021000 	.word	0x40021000

08000f6c <LL_RCC_LSE_IsReady>:
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <LL_RCC_LSE_IsReady+0x24>)
 8000f72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	401a      	ands	r2, r3
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d101      	bne.n	8000f86 <LL_RCC_LSE_IsReady+0x1a>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <LL_RCC_LSE_IsReady+0x1c>
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	40021000 	.word	0x40021000

08000f94 <LL_RCC_MSI_GetRange>:
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <LL_RCC_MSI_GetRange+0x14>)
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	23e0      	movs	r3, #224	; 0xe0
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	4013      	ands	r3, r2
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000

08000fac <LL_RCC_GetSysClkSource>:
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <LL_RCC_GetSysClkSource+0x14>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	220c      	movs	r2, #12
 8000fb6:	4013      	ands	r3, r2
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <LL_RCC_GetAHBPrescaler>:
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <LL_RCC_GetAHBPrescaler+0x14>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	22f0      	movs	r2, #240	; 0xf0
 8000fce:	4013      	ands	r3, r2
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	40021000 	.word	0x40021000

08000fdc <LL_RCC_GetAPB1Prescaler>:
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	23e0      	movs	r3, #224	; 0xe0
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4013      	ands	r3, r2
}
 8000fea:	0018      	movs	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <LL_RCC_GetUSARTClockSource>:
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <LL_RCC_GetUSARTClockSource+0x20>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	401a      	ands	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	041b      	lsls	r3, r3, #16
 8001008:	4313      	orrs	r3, r2
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	40021000 	.word	0x40021000

08001018 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <LL_RCC_PLL_GetMainSource+0x14>)
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	025b      	lsls	r3, r3, #9
 8001024:	4013      	ands	r3, r2
}
 8001026:	0018      	movs	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000

08001030 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	23f0      	movs	r3, #240	; 0xf0
 800103a:	039b      	lsls	r3, r3, #14
 800103c:	4013      	ands	r3, r2
}
 800103e:	0018      	movs	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000

08001048 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <LL_RCC_PLL_GetDivider+0x14>)
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	23c0      	movs	r3, #192	; 0xc0
 8001052:	041b      	lsls	r3, r3, #16
 8001054:	4013      	ands	r3, r2
}
 8001056:	0018      	movs	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000

08001060 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2210      	movs	r2, #16
 800106a:	4013      	ands	r3, r2
 800106c:	2b10      	cmp	r3, #16
 800106e:	d101      	bne.n	8001074 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8001074:	2300      	movs	r3, #0
}
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000

08001080 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b0c      	cmp	r3, #12
 8001090:	d135      	bne.n	80010fe <LL_RCC_GetUSARTClockFreq+0x7e>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff ffad 	bl	8000ff4 <LL_RCC_GetUSARTClockSource>
 800109a:	0003      	movs	r3, r0
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <LL_RCC_GetUSARTClockFreq+0x94>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d00a      	beq.n	80010b8 <LL_RCC_GetUSARTClockFreq+0x38>
 80010a2:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <LL_RCC_GetUSARTClockFreq+0x98>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d015      	beq.n	80010d4 <LL_RCC_GetUSARTClockFreq+0x54>
 80010a8:	4a1c      	ldr	r2, [pc, #112]	; (800111c <LL_RCC_GetUSARTClockFreq+0x9c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d11a      	bne.n	80010e4 <LL_RCC_GetUSARTClockFreq+0x64>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80010ae:	f000 f83b 	bl	8001128 <RCC_GetSystemClockFreq>
 80010b2:	0003      	movs	r3, r0
 80010b4:	60fb      	str	r3, [r7, #12]
        break;
 80010b6:	e027      	b.n	8001108 <LL_RCC_GetUSARTClockFreq+0x88>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80010b8:	f7ff ff48 	bl	8000f4c <LL_RCC_HSI_IsReady>
 80010bc:	1e03      	subs	r3, r0, #0
 80010be:	d020      	beq.n	8001102 <LL_RCC_GetUSARTClockFreq+0x82>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80010c0:	f7ff ffce 	bl	8001060 <LL_RCC_IsActiveFlag_HSIDIV>
 80010c4:	1e03      	subs	r3, r0, #0
 80010c6:	d002      	beq.n	80010ce <LL_RCC_GetUSARTClockFreq+0x4e>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80010ca:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 80010cc:	e019      	b.n	8001102 <LL_RCC_GetUSARTClockFreq+0x82>
            usart_frequency = HSI_VALUE;
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <LL_RCC_GetUSARTClockFreq+0xa4>)
 80010d0:	60fb      	str	r3, [r7, #12]
        break;
 80010d2:	e016      	b.n	8001102 <LL_RCC_GetUSARTClockFreq+0x82>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80010d4:	f7ff ff4a 	bl	8000f6c <LL_RCC_LSE_IsReady>
 80010d8:	1e03      	subs	r3, r0, #0
 80010da:	d014      	beq.n	8001106 <LL_RCC_GetUSARTClockFreq+0x86>
        {
          usart_frequency = LSE_VALUE;
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80010e2:	e010      	b.n	8001106 <LL_RCC_GetUSARTClockFreq+0x86>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80010e4:	f000 f820 	bl	8001128 <RCC_GetSystemClockFreq>
 80010e8:	0003      	movs	r3, r0
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 f860 	bl	80011b0 <RCC_GetHCLKClockFreq>
 80010f0:	0003      	movs	r3, r0
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 f872 	bl	80011dc <RCC_GetPCLK1ClockFreq>
 80010f8:	0003      	movs	r3, r0
 80010fa:	60fb      	str	r3, [r7, #12]
        break;
 80010fc:	e004      	b.n	8001108 <LL_RCC_GetUSARTClockFreq+0x88>
    }
  }
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	e002      	b.n	8001108 <LL_RCC_GetUSARTClockFreq+0x88>
        break;
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	e000      	b.n	8001108 <LL_RCC_GetUSARTClockFreq+0x88>
        break;
 8001106:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8001108:	68fb      	ldr	r3, [r7, #12]
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b004      	add	sp, #16
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	000c0008 	.word	0x000c0008
 8001118:	000c000c 	.word	0x000c000c
 800111c:	000c0004 	.word	0x000c0004
 8001120:	003d0900 	.word	0x003d0900
 8001124:	00f42400 	.word	0x00f42400

08001128 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800112e:	f7ff ff3d 	bl	8000fac <LL_RCC_GetSysClkSource>
 8001132:	0003      	movs	r3, r0
 8001134:	2b04      	cmp	r3, #4
 8001136:	d013      	beq.n	8001160 <RCC_GetSystemClockFreq+0x38>
 8001138:	d802      	bhi.n	8001140 <RCC_GetSystemClockFreq+0x18>
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <RCC_GetSystemClockFreq+0x22>
 800113e:	e021      	b.n	8001184 <RCC_GetSystemClockFreq+0x5c>
 8001140:	2b08      	cmp	r3, #8
 8001142:	d017      	beq.n	8001174 <RCC_GetSystemClockFreq+0x4c>
 8001144:	2b0c      	cmp	r3, #12
 8001146:	d018      	beq.n	800117a <RCC_GetSystemClockFreq+0x52>
 8001148:	e01c      	b.n	8001184 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800114a:	f7ff ff23 	bl	8000f94 <LL_RCC_MSI_GetRange>
 800114e:	0003      	movs	r3, r0
 8001150:	0b5b      	lsrs	r3, r3, #13
 8001152:	3301      	adds	r3, #1
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	0212      	lsls	r2, r2, #8
 8001158:	409a      	lsls	r2, r3
 800115a:	0013      	movs	r3, r2
 800115c:	607b      	str	r3, [r7, #4]
      break;
 800115e:	e01c      	b.n	800119a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001160:	f7ff ff7e 	bl	8001060 <LL_RCC_IsActiveFlag_HSIDIV>
 8001164:	1e03      	subs	r3, r0, #0
 8001166:	d002      	beq.n	800116e <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <RCC_GetSystemClockFreq+0x7c>)
 800116a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 800116c:	e015      	b.n	800119a <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <RCC_GetSystemClockFreq+0x80>)
 8001170:	607b      	str	r3, [r7, #4]
      break;
 8001172:	e012      	b.n	800119a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <RCC_GetSystemClockFreq+0x84>)
 8001176:	607b      	str	r3, [r7, #4]
      break;
 8001178:	e00f      	b.n	800119a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800117a:	f000 f843 	bl	8001204 <RCC_PLL_GetFreqDomain_SYS>
 800117e:	0003      	movs	r3, r0
 8001180:	607b      	str	r3, [r7, #4]
      break;
 8001182:	e00a      	b.n	800119a <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001184:	f7ff ff06 	bl	8000f94 <LL_RCC_MSI_GetRange>
 8001188:	0003      	movs	r3, r0
 800118a:	0b5b      	lsrs	r3, r3, #13
 800118c:	3301      	adds	r3, #1
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	0212      	lsls	r2, r2, #8
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	607b      	str	r3, [r7, #4]
      break;
 8001198:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800119a:	687b      	ldr	r3, [r7, #4]
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	003d0900 	.word	0x003d0900
 80011a8:	00f42400 	.word	0x00f42400
 80011ac:	007a1200 	.word	0x007a1200

080011b0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80011b8:	f7ff ff04 	bl	8000fc4 <LL_RCC_GetAHBPrescaler>
 80011bc:	0003      	movs	r3, r0
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	220f      	movs	r2, #15
 80011c2:	4013      	ands	r3, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <RCC_GetHCLKClockFreq+0x28>)
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	001a      	movs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	40d3      	lsrs	r3, r2
}
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	08001534 	.word	0x08001534

080011dc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80011e4:	f7ff fefa 	bl	8000fdc <LL_RCC_GetAPB1Prescaler>
 80011e8:	0003      	movs	r3, r0
 80011ea:	0a1b      	lsrs	r3, r3, #8
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <RCC_GetPCLK1ClockFreq+0x24>)
 80011ee:	5cd3      	ldrb	r3, [r2, r3]
 80011f0:	001a      	movs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	40d3      	lsrs	r3, r2
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	08001544 	.word	0x08001544

08001204 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800120a:	f7ff ff05 	bl	8001018 <LL_RCC_PLL_GetMainSource>
 800120e:	0003      	movs	r3, r0
 8001210:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d109      	bne.n	800122c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001218:	f7ff ff22 	bl	8001060 <LL_RCC_IsActiveFlag_HSIDIV>
 800121c:	1e03      	subs	r3, r0, #0
 800121e:	d002      	beq.n	8001226 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001222:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8001224:	e005      	b.n	8001232 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8001228:	607b      	str	r3, [r7, #4]
      break;
 800122a:	e002      	b.n	8001232 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800122e:	607b      	str	r3, [r7, #4]
      break;
 8001230:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8001232:	f7ff fefd 	bl	8001030 <LL_RCC_PLL_GetMultiplicator>
 8001236:	0003      	movs	r3, r0
 8001238:	0c9b      	lsrs	r3, r3, #18
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800123c:	5cd3      	ldrb	r3, [r2, r3]
 800123e:	001a      	movs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4353      	muls	r3, r2
 8001244:	001c      	movs	r4, r3
 8001246:	f7ff feff 	bl	8001048 <LL_RCC_PLL_GetDivider>
 800124a:	0003      	movs	r3, r0
 800124c:	0d9b      	lsrs	r3, r3, #22
 800124e:	3301      	adds	r3, #1
 8001250:	0019      	movs	r1, r3
 8001252:	0020      	movs	r0, r4
 8001254:	f7fe ff58 	bl	8000108 <__udivsi3>
 8001258:	0003      	movs	r3, r0
}
 800125a:	0018      	movs	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	b003      	add	sp, #12
 8001260:	bd90      	pop	{r4, r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	003d0900 	.word	0x003d0900
 8001268:	00f42400 	.word	0x00f42400
 800126c:	007a1200 	.word	0x007a1200
 8001270:	0800154c 	.word	0x0800154c

08001274 <LL_USART_IsEnabled>:
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2201      	movs	r2, #1
 8001282:	4013      	ands	r3, r2
 8001284:	2b01      	cmp	r3, #1
 8001286:	d101      	bne.n	800128c <LL_USART_IsEnabled+0x18>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <LL_USART_IsEnabled+0x1a>
 800128c:	2300      	movs	r3, #0
}
 800128e:	0018      	movs	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <LL_USART_SetStopBitsLength>:
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <LL_USART_SetStopBitsLength+0x24>)
 80012a8:	401a      	ands	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	605a      	str	r2, [r3, #4]
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	ffffcfff 	.word	0xffffcfff

080012c0 <LL_USART_SetHWFlowCtrl>:
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <LL_USART_SetHWFlowCtrl+0x24>)
 80012d0:	401a      	ands	r2, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	609a      	str	r2, [r3, #8]
}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	b002      	add	sp, #8
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	fffffcff 	.word	0xfffffcff

080012e8 <LL_USART_SetBaudRate>:
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d11c      	bne.n	800133a <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	005a      	lsls	r2, r3, #1
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	085b      	lsrs	r3, r3, #1
 8001308:	18d3      	adds	r3, r2, r3
 800130a:	6839      	ldr	r1, [r7, #0]
 800130c:	0018      	movs	r0, r3
 800130e:	f7fe fefb 	bl	8000108 <__udivsi3>
 8001312:	0003      	movs	r3, r0
 8001314:	b29b      	uxth	r3, r3
 8001316:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	4a10      	ldr	r2, [pc, #64]	; (800135c <LL_USART_SetBaudRate+0x74>)
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	085b      	lsrs	r3, r3, #1
 8001324:	b29b      	uxth	r3, r3
 8001326:	001a      	movs	r2, r3
 8001328:	2307      	movs	r3, #7
 800132a:	4013      	ands	r3, r2
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	60da      	str	r2, [r3, #12]
}
 8001338:	e00c      	b.n	8001354 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	085a      	lsrs	r2, r3, #1
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	18d3      	adds	r3, r2, r3
 8001342:	6839      	ldr	r1, [r7, #0]
 8001344:	0018      	movs	r0, r3
 8001346:	f7fe fedf 	bl	8000108 <__udivsi3>
 800134a:	0003      	movs	r3, r0
 800134c:	b29b      	uxth	r3, r3
 800134e:	001a      	movs	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	60da      	str	r2, [r3, #12]
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b006      	add	sp, #24
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0000fff0 	.word	0x0000fff0

08001360 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800136a:	230f      	movs	r3, #15
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff ff7b 	bl	8001274 <LL_USART_IsEnabled>
 800137e:	1e03      	subs	r3, r0, #0
 8001380:	d13b      	bne.n	80013fa <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a20      	ldr	r2, [pc, #128]	; (8001408 <LL_USART_Init+0xa8>)
 8001388:	401a      	ands	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	6859      	ldr	r1, [r3, #4]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	4319      	orrs	r1, r3
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	4319      	orrs	r1, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	430b      	orrs	r3, r1
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	0011      	movs	r1, r2
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff ff72 	bl	8001298 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	0011      	movs	r1, r2
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff ff7f 	bl	80012c0 <LL_USART_SetHWFlowCtrl>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <LL_USART_Init+0xac>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d104      	bne.n	80013d4 <LL_USART_Init+0x74>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80013ca:	200c      	movs	r0, #12
 80013cc:	f7ff fe58 	bl	8001080 <LL_RCC_GetUSARTClockFreq>
 80013d0:	0003      	movs	r3, r0
 80013d2:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00f      	beq.n	80013fa <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 80013e2:	230f      	movs	r3, #15
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	699a      	ldr	r2, [r3, #24]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68b9      	ldr	r1, [r7, #8]
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff77 	bl	80012e8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80013fa:	230f      	movs	r3, #15
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	781b      	ldrb	r3, [r3, #0]
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b004      	add	sp, #16
 8001406:	bd80      	pop	{r7, pc}
 8001408:	efff69f3 	.word	0xefff69f3
 800140c:	40004400 	.word	0x40004400

08001410 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800141a:	6839      	ldr	r1, [r7, #0]
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7fe fe73 	bl	8000108 <__udivsi3>
 8001422:	0003      	movs	r3, r0
 8001424:	001a      	movs	r2, r3
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <LL_InitTick+0x30>)
 8001428:	3a01      	subs	r2, #1
 800142a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <LL_InitTick+0x30>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001432:	4b03      	ldr	r3, [pc, #12]	; (8001440 <LL_InitTick+0x30>)
 8001434:	2205      	movs	r2, #5
 8001436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}
 8001440:	e000e010 	.word	0xe000e010

08001444 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800144c:	23fa      	movs	r3, #250	; 0xfa
 800144e:	009a      	lsls	r2, r3, #2
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	0011      	movs	r1, r2
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff ffdb 	bl	8001410 <LL_InitTick>
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b002      	add	sp, #8
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <LL_mDelay+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001472:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3301      	adds	r3, #1
 8001478:	d00c      	beq.n	8001494 <LL_mDelay+0x30>
  {
    Delay++;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3301      	adds	r3, #1
 800147e:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001480:	e008      	b.n	8001494 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <LL_mDelay+0x40>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	025b      	lsls	r3, r3, #9
 800148a:	4013      	ands	r3, r2
 800148c:	d002      	beq.n	8001494 <LL_mDelay+0x30>
    {
      Delay--;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3b01      	subs	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f3      	bne.n	8001482 <LL_mDelay+0x1e>
    }
  }
}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	b004      	add	sp, #16
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <LL_SetSystemCoreClock+0x18>)
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	601a      	str	r2, [r3, #0]
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	20000020 	.word	0x20000020

080014c4 <__libc_init_array>:
 80014c4:	b570      	push	{r4, r5, r6, lr}
 80014c6:	2600      	movs	r6, #0
 80014c8:	4d0c      	ldr	r5, [pc, #48]	; (80014fc <__libc_init_array+0x38>)
 80014ca:	4c0d      	ldr	r4, [pc, #52]	; (8001500 <__libc_init_array+0x3c>)
 80014cc:	1b64      	subs	r4, r4, r5
 80014ce:	10a4      	asrs	r4, r4, #2
 80014d0:	42a6      	cmp	r6, r4
 80014d2:	d109      	bne.n	80014e8 <__libc_init_array+0x24>
 80014d4:	2600      	movs	r6, #0
 80014d6:	f000 f821 	bl	800151c <_init>
 80014da:	4d0a      	ldr	r5, [pc, #40]	; (8001504 <__libc_init_array+0x40>)
 80014dc:	4c0a      	ldr	r4, [pc, #40]	; (8001508 <__libc_init_array+0x44>)
 80014de:	1b64      	subs	r4, r4, r5
 80014e0:	10a4      	asrs	r4, r4, #2
 80014e2:	42a6      	cmp	r6, r4
 80014e4:	d105      	bne.n	80014f2 <__libc_init_array+0x2e>
 80014e6:	bd70      	pop	{r4, r5, r6, pc}
 80014e8:	00b3      	lsls	r3, r6, #2
 80014ea:	58eb      	ldr	r3, [r5, r3]
 80014ec:	4798      	blx	r3
 80014ee:	3601      	adds	r6, #1
 80014f0:	e7ee      	b.n	80014d0 <__libc_init_array+0xc>
 80014f2:	00b3      	lsls	r3, r6, #2
 80014f4:	58eb      	ldr	r3, [r5, r3]
 80014f6:	4798      	blx	r3
 80014f8:	3601      	adds	r6, #1
 80014fa:	e7f2      	b.n	80014e2 <__libc_init_array+0x1e>
 80014fc:	08001558 	.word	0x08001558
 8001500:	08001558 	.word	0x08001558
 8001504:	08001558 	.word	0x08001558
 8001508:	0800155c 	.word	0x0800155c

0800150c <memset>:
 800150c:	0003      	movs	r3, r0
 800150e:	1812      	adds	r2, r2, r0
 8001510:	4293      	cmp	r3, r2
 8001512:	d100      	bne.n	8001516 <memset+0xa>
 8001514:	4770      	bx	lr
 8001516:	7019      	strb	r1, [r3, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	e7f9      	b.n	8001510 <memset+0x4>

0800151c <_init>:
 800151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001522:	bc08      	pop	{r3}
 8001524:	469e      	mov	lr, r3
 8001526:	4770      	bx	lr

08001528 <_fini>:
 8001528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800152e:	bc08      	pop	{r3}
 8001530:	469e      	mov	lr, r3
 8001532:	4770      	bx	lr
